{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlawl\\\\pi_market\\\\src\\\\components\\\\Connect2Phantom.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Connect2Phantom = () => {\n  _s();\n\n  const [walletAvail, setWalletAvail] = useState(false);\n  const [provider, setProvider] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [pubKey, setPubKey] = useState(null);\n  useEffect(() => {\n    if (\"solana\" in window) {\n      var _solWindow$solana;\n\n      const solWindow = window;\n\n      if (solWindow !== null && solWindow !== void 0 && (_solWindow$solana = solWindow.solana) !== null && _solWindow$solana !== void 0 && _solWindow$solana.isPhantom) {\n        setProvider(solWindow.solana);\n        setWalletAvail(true); // Attemp an eager connection\n\n        solWindow.solana.connect({\n          onlyIfTrusted: true\n        });\n      }\n    }\n  }, []);\n  useEffect(() => {\n    provider === null || provider === void 0 ? void 0 : provider.on(\"connect\", publicKey => {\n      console.log(`connect event: ${publicKey}`);\n      setConnected(true);\n      setPubKey(publicKey);\n    });\n    provider === null || provider === void 0 ? void 0 : provider.on(\"disconnect\", () => {\n      console.log(\"disconnect event\");\n      setConnected(false);\n      setPubKey(null);\n    });\n  }, [provider]);\n\n  const connectHandler = event => {\n    console.log(`connect handler`);\n    provider === null || provider === void 0 ? void 0 : provider.connect().catch(err => {\n      console.error(\"connect ERROR:\", err);\n    });\n  };\n\n  const disconnectHandler = event => {\n    console.log(\"disconnect handler\");\n    provider === null || provider === void 0 ? void 0 : provider.disconnect().catch(err => {\n      console.error(\"disconnect ERROR:\", err);\n    });\n  };\n\n  const walletButton = {\n    backgroundColor: '#00704A',\n    color: 'white',\n    textShadow: 'none',\n    width: '300px',\n    height: '50px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: walletAvail ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: walletButton,\n        disabled: connected,\n        onClick: connectHandler,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), connected ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your public key is : \", pubKey === null || pubKey === void 0 ? void 0 : pubKey.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 32\n      }, this) : null]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: walletButton,\n        onClick: () => window.open('https://phantom.app/', '_blank'),\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Connect2Phantom, \"Ebpi9Qpb5IjfDI/K46Tm77PxWbc=\");\n\n_c = Connect2Phantom;\nexport default Connect2Phantom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect2Phantom\");","map":{"version":3,"sources":["C:/Users/rlawl/pi_market/src/components/Connect2Phantom.tsx"],"names":["useEffect","useState","Connect2Phantom","walletAvail","setWalletAvail","provider","setProvider","connected","setConnected","pubKey","setPubKey","window","solWindow","solana","isPhantom","connect","onlyIfTrusted","on","publicKey","console","log","connectHandler","event","catch","err","error","disconnectHandler","disconnect","walletButton","backgroundColor","color","textShadow","width","height","toBase58","open"],"mappings":"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","sourcesContent":["\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\n\r\n\r\ntype PhantomEvent = \"disconnect\" | \"connect\" | \"accountChanged\";\r\n\r\ninterface ConnectOpts {\r\n    onlyIfTrusted: boolean;\r\n}\r\n\r\ninterface PhantomProvider {\r\n    connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\r\n    disconnect: ()=>Promise<void>;\r\n    on: (event: PhantomEvent, callback: (args:any)=>void) => void;\r\n    isPhantom: boolean;\r\n}\r\n\r\ntype WindowWithSolana = Window & { \r\n    solana?: PhantomProvider;\r\n}\r\n\r\n\r\n\r\nconst Connect2Phantom: FC = () => {\r\n\r\n    const [ walletAvail, setWalletAvail ] = useState(false);\r\n    const [ provider, setProvider ] = useState<PhantomProvider | null>(null);\r\n    const [ connected, setConnected ] = useState(false);\r\n    const [ pubKey, setPubKey ] = useState<PublicKey | null>(null);\r\n\r\n\r\n    useEffect( ()=>{\r\n        if (\"solana\" in window) {\r\n            const solWindow = window as WindowWithSolana;\r\n            if (solWindow?.solana?.isPhantom) {\r\n                setProvider(solWindow.solana);\r\n                setWalletAvail(true);\r\n                // Attemp an eager connection\r\n                solWindow.solana.connect({ onlyIfTrusted: true });\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect( () => {\r\n        provider?.on(\"connect\", (publicKey: PublicKey)=>{ \r\n            console.log(`connect event: ${publicKey}`);\r\n            setConnected(true); \r\n            setPubKey(publicKey);\r\n        });\r\n        provider?.on(\"disconnect\", ()=>{ \r\n            console.log(\"disconnect event\");\r\n            setConnected(false); \r\n            setPubKey(null);\r\n        });\r\n\r\n    }, [provider]);\r\n\r\n\r\n    const connectHandler: React.MouseEventHandler<HTMLButtonElement> = (event) => {\r\n        console.log(`connect handler`);\r\n        provider?.connect()\r\n        .catch((err) => { console.error(\"connect ERROR:\", err); });\r\n    }\r\n\r\n    const disconnectHandler: React.MouseEventHandler<HTMLButtonElement> = (event) => {\r\n        console.log(\"disconnect handler\");\r\n        provider?.disconnect()\r\n        .catch((err) => {console.error(\"disconnect ERROR:\", err); });\r\n    }\r\n\r\n    const walletButton={\r\n        backgroundColor : '#00704A',\r\n        color: 'white',\r\n        textShadow : 'none',\r\n        width:'300px',\r\n        height:'50px',\r\n        \r\n      }\r\n\r\n    return (\r\n        <div>\r\n            { walletAvail ?\r\n                <>\r\n                <button style={walletButton} disabled={connected} onClick={connectHandler}>Connect Wallet</button>\r\n                 { connected ? <p>Your public key is : {pubKey?.toBase58()}</p> : null }\r\n                </>\r\n            :\r\n                <>\r\n                <button style={walletButton} onClick={() => window.open('https://phantom.app/', '_blank')}>Connect Wallet</button>\r\n                \r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Connect2Phantom;"]},"metadata":{},"sourceType":"module"}